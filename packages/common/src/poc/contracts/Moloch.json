{
  "MolochSummoner": {
    "abi": [
      "function summonMoloch(address[] memory _summoner,address[] memory _approvedTokens,uint256 _periodDuration,uint256 _votingPeriodLength,uint256 _gracePeriodLength,uint256 _proposalDeposit,uint256 _dilutionBound,uint256 _processingReward,uint256[] memory _summonerShares) public returns (address)",
      "function registerDao(address _daoAddress, string memory _daoTitle, string memory _http, uint _version) public returns (bool)",
      "event SummonComplete(address indexed moloch, address[] summoner, address[] tokens, uint256 summoningTime, uint256 periodDuration, uint256 votingPeriodLength, uint256 gracePeriodLength, uint256 proposalDeposit, uint256 dilutionBound, uint256 processingReward, uint256[] summonerShares)",
      "event Register(uint daoIdx, address moloch, string title, string http, uint version)"
    ]
  },
  "Moloch": {
    "abi": [
      "function proposals(uint256) view returns (address applicant, address proposer, address sponsor, uint256 sharesRequested, uint256 lootRequested, uint256 tributeOffered, address tributeToken, uint256 paymentRequested, address paymentToken, uint256 startingPeriod, uint256 yesVotes, uint256 noVotes, string details, uint256 maxTotalSharesAndLootAtYesVote)",
      "function processingReward() view returns (uint256)",
      "function getMemberProposalVote(address memberAddress, uint256 proposalIndex) view returns (uint8)",
      "function getCurrentPeriod() view returns (uint256)",
      "function members(address) view returns (address delegateKey, uint256 shares, uint256 loot, bool exists, uint256 highestIndexYesVote, uint256 jailed)",
      "function withdrawBalance(address token, uint256 amount)",
      "function submitGuildKickProposal(address memberToKick, string details) returns (uint256 proposalId)",
      "function ragequit(uint256 sharesToBurn, uint256 lootToBurn)",
      "function approvedTokens(uint256) view returns (address)",
      "function updateDelegateKey(address newDelegateKey)",
      "function TOTAL() view returns (address)",
      "function processWhitelistProposal(uint256 proposalIndex)",
      "function totalShares() view returns (uint256)",
      "function proposalQueue(uint256) view returns (uint256)",
      "function proposedToKick(address) view returns (bool)",
      "function memberAddressByDelegateKey(address) view returns (address)",
      "function withdrawBalances(address[] tokens, uint256[] amounts, bool max)",
      "function userTokenBalances(address, address) view returns (uint256)",
      "function submitProposal(address applicant, uint256 sharesRequested, uint256 lootRequested, uint256 tributeOffered, address tributeToken, uint256 paymentRequested, address paymentToken, string details) returns (uint256 proposalId)",
      "function collectTokens(address token)",
      "function totalLoot() view returns (uint256)",
      "function gracePeriodLength() view returns (uint256)",
      "function getUserTokenBalance(address user, address token) view returns (uint256)",
      "function tokenWhitelist(address) view returns (bool)",
      "function getTokenCount() view returns (uint256)",
      "function getProposalQueueLength() view returns (uint256)",
      "function summoningTime() view returns (uint256)",
      "function votingPeriodLength() view returns (uint256)",
      "function proposalDeposit() view returns (uint256)",
      "function hasVotingPeriodExpired(uint256 startingPeriod) view returns (bool)",
      "function sponsorProposal(uint256 proposalId)",
      "function submitVote(uint256 proposalIndex, uint8 uintVote)",
      "function totalGuildBankTokens() view returns (uint256)",
      "function canRagequit(uint256 highestIndexYesVote) view returns (bool)",
      "function init(address[] _summoner, address[] _approvedTokens, uint256 _periodDuration, uint256 _votingPeriodLength, uint256 _gracePeriodLength, uint256 _proposalDeposit, uint256 _dilutionBound, uint256 _processingReward, uint256[] _summonerShares)",
      "function dilutionBound() view returns (uint256)",
      "function getProposalFlags(uint256 proposalId) view returns (bool[6])",
      "function memberList(uint256) view returns (address)",
      "function periodDuration() view returns (uint256)",
      "function depositToken() view returns (address)",
      "function proposalCount() view returns (uint256)",
      "function ragekick(address memberToKick)",
      "function cancelProposal(uint256 proposalId)",
      "function proposedToWhitelist(address) view returns (bool)",
      "function processGuildKickProposal(uint256 proposalIndex)",
      "function processProposal(uint256 proposalIndex)",
      "function ESCROW() view returns (address)",
      "function GUILD() view returns (address)",
      "function submitWhitelistProposal(address tokenToWhitelist, string details) returns (uint256 proposalId)",
      "constructor(address _summoner, address[] _approvedTokens, uint256 _periodDuration, uint256 _votingPeriodLength, uint256 _gracePeriodLength, uint256 _proposalDeposit, uint256 _dilutionBound, uint256 _processingReward)",
      "event SummonComplete(address indexed summoner, address[] tokens, uint256 summoningTime, uint256 periodDuration, uint256 votingPeriodLength, uint256 gracePeriodLength, uint256 proposalDeposit, uint256 dilutionBound, uint256 processingReward)",
      "event SubmitProposal(address indexed applicant, uint256 sharesRequested, uint256 lootRequested, uint256 tributeOffered, address tributeToken, uint256 paymentRequested, address paymentToken, string details, bool[6] flags, uint256 proposalId, address indexed delegateKey, address indexed memberAddress)",
      "event SponsorProposal(address indexed delegateKey, address indexed memberAddress, uint256 proposalId, uint256 proposalIndex, uint256 startingPeriod)",
      "event SubmitVote(uint256 proposalId, uint256 indexed proposalIndex, address indexed delegateKey, address indexed memberAddress, uint8 uintVote)",
      "event ProcessProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass)",
      "event ProcessWhitelistProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass)",
      "event ProcessGuildKickProposal(uint256 indexed proposalIndex, uint256 indexed proposalId, bool didPass)",
      "event Ragequit(address indexed memberAddress, uint256 sharesToBurn, uint256 lootToBurn)",
      "event TokensCollected(address indexed token, uint256 amountToCollect)",
      "event CancelProposal(uint256 indexed proposalId, address applicantAddress)",
      "event UpdateDelegateKey(address indexed memberAddress, address newDelegateKey)",
      "event Withdraw(address indexed memberAddress, address token, uint256 amount)"
    ]
  }
}

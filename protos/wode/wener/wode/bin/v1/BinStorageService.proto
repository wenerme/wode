syntax = "proto3";
package wener.wode.storage.bin.v1;

import "google/protobuf/timestamp.proto";
import "wode/resource/protos.proto";

service WodeBinService {
  // 存储内容，返回生成的 key
  rpc Put(PutRequest) returns (PutResponse);

  // 获取指定 key 的内容
  rpc Get(GetRequest) returns (GetResponse);

  // 删除指定 key 的内容
  rpc Delete(DeleteRequest) returns (DeleteResponse);

  // 列出内容的元数据，支持分页
  rpc List(ListRequest) returns (ListResponse);
}

// 元数据信息，包括内容类型、编码方式、生存时间和加密方法等
message BinMeta {
  string key = 1;
  optional string title = 2;
  optional string content_type = 3; // 指定内容类型，例如 text/plain, application/json
  optional string content_encoding = 4; // 指定内容的编码方式，如 gzip
  google.protobuf.Timestamp create_time = 5; // 内容的创建时间
  optional google.protobuf.Timestamp expire_time = 6; // 内容的过期时间
  int64 size = 7; // 内容大小，以字节为单位
  int64 ttl = 8; // 生存时间（TTL），以秒为单位
  string encrypt_method = 9; // 加密方法，例如 "AES-256", "RSA" 等
}

message PutRequest {
  string key = 1; // 指定 key，如果留空则自动生成
  BinMeta meta = 2; // 元数据信息（可选）
  oneof content {
    string text = 3; // 文本内容
    bytes binary = 4; // 二进制内容
  }
}

message PutResponse {
  string key = 1; // 返回生成的唯一 key
}

message GetRequest {
  string key = 1; // 内容的唯一标识符
  bool include_content = 2; // 是否包含实际内容数据，false 时只返回元数据
}

message GetResponse {
  BinMeta meta = 1; // 元数据信息
  oneof content {
    string text = 2; // 文本内容
    bytes binary = 3; // 二进制内容
  }
}

message ListRequest {
  //  wode.resource.v1.ListQuery query = 1;
}

message ListResponse {
  repeated BinMeta data = 1; // 当前页的内容元数据列表
  string next_page_token = 2; // 下一页的标记，如果没有更多数据则为空
}

message DeleteRequest {
  string key = 1; // 要删除的内容唯一标识符
}

message DeleteResponse {
  bool success = 1; // 是否成功删除
  string message = 2; // 删除操作的反馈信息
}
